{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"discord-features-handler","text":"<p>DiscordFeaturesHandler is a handler for Discord.js commands, slash commands, and discord events</p> <p> </p> <p> Source Code: https://github.com/bng94/discord-features-handler</p> <p> Changelog:  Release Notes</p> <p>discord-features-handler allows you to follow the Discord.js guide with a few changes, such as using a JavaScript file instead of a JSON file for the <code>config</code> file without creating your own handler for loading commands and events file. This package also supports TypeScript natively, so you can create your bot in JavaScript or TypeScript, based on your preferences.</p> <p>Some key Features are: </p> <ul> <li>Loads Commands File</li> <li>Loads Events File</li> <li>Pre-built messageCreate event to run commands call</li> <li>Pre-built interactionCreate event to run slash commands call</li> <li>String.prototype.toProperCase(): returns a capitalization String function for words in a sentence format.</li> <li>Array.random(): returns a random element of an Array.</li> </ul> <p>You do not need to worry about how to handle and make a command or event run. This package provides a well-versed, all-around handler to create your Discord.js bot. This ensures that all your event, command, and module files are loaded without worrying about how to run these files. The only focus should be on what commands, events, and their functionality you should have for your bot. </p> <ul> <li> <p> Want to jump right in? - Feeling like an eager beaver? Starting by installing the package and setup the folder structure and layout</p> </li> <li> <p> Want to deep dive? \u2013 Dive a little deeper by starting with configuring DiscordFeaturesHandlerOptions</p> </li> <li> Setting up DiscordJS Events \u2013 Create your DiscordJS events to listen for events to handled</li> <li> Setting up Commands Files \u2013 Create your command files for your DiscordJS bot and allow users to interact with the bot.</li> <li> Setting up your bot permissions \u2013 Set up and configure your bot permissions for what  a user can use with your bot.</li> </ul>"},{"location":"#bugs-support-suggestions","title":"Bugs / Support / Suggestions","text":"<p>If you encounter a problem with the bot, please  file an issue.</p> <p>When reporting an issue, please include the following details:</p> <ul> <li>Steps to reproduce the issue</li> <li>Expected behavior</li> <li>Actual (unexpected) behavior</li> <li>Any relevant screenshots or logs</li> </ul> <p>Your detailed report will help us resolve the issue as quickly as possible. </p> <p>Feel free to submit a pull request if you have any suggestions or improvements.</p>"},{"location":"about/","title":"About","text":"<p>discord-features-handler began as a personal project to create my first npm package. At the time, I was developing three Discord.js bots for different servers using the same format for loading commands, events, and module files for the bots.</p> <p>By making this package, I hope I can help bot developers create their own Discord.js bots without the hassle of defining a handler to load each file and just focus on building the command and event files for the bot.</p>"},{"location":"about/#roadmap-and-future-development","title":"Roadmap and future development","text":"<p>Future development of this package will reflect major version updates for Discord.js as well as any bug fixes for this package. You can check the progress in the dev branch; however, there may be undocumented changes and features.</p> Development Branch <pre><code>  npm install github:bng94/discord-features-handler#dev\n</code></pre>"},{"location":"about/#support-and-feedback","title":"Support and Feedback","text":"<p>This package is looking for feedback and ideas to help cover more use cases. If you have any ideas, feel free to share them or even contribute to this package! Please first discuss the add-on or change you wish to make in the repository.</p> <p>If you like this package and want to see more add-ons, please support me by starring the GitHub repository and/or providing some feedback, contributing, improving, and/or stating issues that you come across in the package to the GitHub repository.</p>"},{"location":"demo/","title":"Demo Discord Bot","text":"<p>A Discord.js demo bot for this package, will be called heroku-bot on github.</p>"},{"location":"demo/#clone-the-repository","title":"Clone the repository","text":"JSTS <pre><code># Clone your forked repository\ngit clone https://github.com/YOUR_GITHUB_USERNAME/heroku-bot.git\n\n# Navigate into the repository\ncd heroku-bot\n\n# Add the original repository as a remote named 'upstream'\ngit remote add upstream https://github.com/bng94/heroku-bot.git\n\n# Verify the remote configuration\ngit remote -v\n</code></pre> <pre><code># Clone your forked repository and checkout the 'Typescript' branch\ngit clone --branch Typescript https://github.com/YOUR_GITHUB_USERNAME/heroku-bot.git\n\n# Navigate into the repository\ncd heroku-bot\n\n# Add the original repository as a remote named 'upstream'\ngit remote add upstream https://github.com/bng94/heroku-bot.git\n\n# Verify the remote configuration\ngit remote -v\n</code></pre> <p>Afterwards make sure to install all the dependencies required by using: </p> <pre><code>npm install\n</code></pre>"},{"location":"demo/#create-your-environment-variables-file","title":"Create your Environment variables file","text":"<p>This file is called <code>.env</code> and should be in the same parent folder as your <code>index.js</code> file. You can learn more about the environment variables here.</p> <p>Define the following variables: <code>DISCORD_TOKEN</code>, <code>OWNER_ID</code>, <code>CLIENT_ID</code>, <code>DEVELOPMENT_GUILD_ID</code>.</p>"},{"location":"demo/#starting-the-bot","title":"Starting the bot","text":"JSTS <p><pre><code>node index.js\n</code></pre> or  <pre><code>pm2 start index.js\n</code></pre></p> <p>First compile the code:  <pre><code>npm run build\n</code></pre> now you can start up the bot using the following: <pre><code>npm run dev\n</code></pre> or <pre><code>npm run prod\n</code></pre></p> <p>Now your bot should be up and running. You can check these out to set up your bot.</p> <ul> <li> Setting up Config File</li> <li> Setting up event files</li> <li> Setting up command files</li> <li> Setting up slash command files</li> <li> Setting up other interactions</li> <li> Configure DiscordFeaturesHandlerOptions</li> </ul>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#311-latest-version","title":"3.1.1 \u2013 Latest Version","text":""},{"location":"release-notes/#patch","title":"Patch","text":"<ul> <li>Removed console warning for when slashCommandIdsToDelete is not used.</li> </ul>"},{"location":"release-notes/#310","title":"3.1.0","text":""},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>Introduced a new <code>executePrefix</code> property for handling prefix commands.</li> <li>Enabled usage of <code>execute</code> property to run slash commands.<ul> <li>As Discord Recommends slash commands, discord-feature-handler will start migrating to follow discord.js guide to make it easier to create slash commands.</li> </ul> </li> <li>Following Prefix Command Properties are now optional:<ul> <li><code>aliases</code></li> <li><code>minArgs</code></li> <li><code>permissions</code></li> <li><code>usage</code></li> </ul> </li> <li>Following Slash Command Properties are now optional:<ul> <li><code>name</code> - slash commands only</li> <li><code>description</code> - slash commands only</li> </ul> </li> <li>New Slash Command Property:<ul> <li><code>global</code>: boolean; default is false<ul> <li>Allows creation of global slash command for the specific command file</li> </ul> </li> </ul> </li> <li><code>customIds</code> Property is now changed to be Array of Strings and no longer accepts Objects</li> <li>Updated <code>slashCommandIdsToDelete</code> property to be an object containing two property: <code>global</code> and <code>guild</code></li> <li>Each of these property are an Array containing the slash commands ids to be deleted <li>Recommended name changes to Command Properties:<ul> <li>These changes are not mandatory until v4.0.0</li> <li>For executing prefix commands: <code>execute</code> \u2192 <code>executePrefix</code><ul> <li>Added console warnings when prefix commands use <code>execute</code> instead of <code>executePrefix</code>.</li> </ul> </li> <li>For executing slash commands: <code>interactionReply</code> \u2192 <code>execute</code><ul> <li>Added console warnings when slash commands use <code>interactionReply</code> instead of <code>execute</code>.</li> </ul> </li> </ul> </li>"},{"location":"release-notes/#deprecation","title":"Deprecation","text":"<ul> <li><code>interactionReply</code> is now deprecated. It will continue to work in v3.x, but logs a console warning.   Please migrate to <code>execute</code>, as <code>interactionReply</code> will be removed in v4.0.0.</li> </ul>"},{"location":"release-notes/#300","title":"3.0.0","text":""},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>Added new optional options to <code>DiscordFeaturesHandlerOptions</code>:</li> <li><code>slashCommandIdsToDelete</code>: Array of strings for deleting specific slash command IDs.</li> <li><code>onSlashCommandsLoading</code>: Object of booleans for enabling the deletion of slash commands before loading new ones.</li> </ul> <ul> <li>Updated <code>CommandFile</code> properties:<ul> <li>Changed <code>customIds</code> to accept either an array of strings (<code>customIds</code>) or an object of key\u2013value pairs.</li> <li>Removed <code>componentInteraction</code>, <code>autoCompleteInteraction</code>, <code>contextMenuInteraction</code>, and <code>modalInteraction</code>, replacing them with a single universal property: <code>customIdInteraction</code>.   This new property handles interactions based on <code>customIds</code>.</li> <li>Added <code>customIdInteraction(interaction, client, level)</code> to <code>CommandFile</code> properties to ensure that no button or other customId-based interaction becomes inactive if the bot application or collector times out.</li> </ul> </li> </ul>"},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>Fixed an issue where prefix commands were not working.</li> </ul>"},{"location":"release-notes/#220","title":"2.2.0","text":""},{"location":"release-notes/#fix","title":"Fix","text":"<ul> <li>Updated event loader to prevent duplicate event listeners.</li> </ul>"},{"location":"release-notes/#212","title":"2.1.2","text":""},{"location":"release-notes/#fix_1","title":"Fix","text":"<ul> <li>Removed type check for cmd.data which caused an error for commands missing data property.</li> </ul>"},{"location":"release-notes/#chore","title":"Chore","text":"<ul> <li>Updated build scripts for npm publish </li> </ul>"},{"location":"release-notes/#211","title":"2.1.1","text":""},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>Add TypeScript Support page</li> <li>Update config page and removed  <code>modRole</code> and <code>adminRole</code> property </li> </ul>"},{"location":"release-notes/#refactor","title":"Refactor","text":"<ul> <li>Removed <code>modRole</code> and <code>adminRole</code> from config file (These property has been replaced with roles object property).</li> <li>Add more errors check for command files.</li> <li>Refactored minArgs and maxArgs check.</li> <li>Reformated README.md and updated package.json file</li> <li>remove requirement of cmd aliases and updated types file</li> </ul>"},{"location":"release-notes/#chore_1","title":"Chore","text":"<ul> <li>Updated build scripts for deployment </li> </ul>"},{"location":"release-notes/#210","title":"2.1.0","text":""},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>Switched documentation from GitBook to GitHub Pages using MkDocs</li> <li>Included demo bot documentation into the new GitHub Pages documentation</li> <li>Refreshed the UI for a new look and feel of the discord-features-handler documentation</li> </ul>"},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>Added <code>roles</code> as an object property into config file, <code>modRole</code> and <code>adminRole</code> are one two properties replacing <code>modRole</code> and <code>adminRole</code> property of config file</li> <li>Added <code>customIds</code> as an object property into command files, contains the following keys: <code>messageComponent</code>, <code>modal</code>, and <code>autoComplete</code>. The values are an array of strings containing the customIds for the respective interaction.</li> <li>Added <code>componentInteraction(interaction, client, level)</code> method property into command files, as an optional property for select menu and button interactions if you are not using<code>createMessageComponentCollector</code>.</li> <li>Added <code>autoCompleteInteraction(interaction, client, level)</code> method property into command files for handling auto complete interactions</li> <li>Added <code>contextMenuInteraction(interaction, client, level)</code> method property into command files for handling user context menu interactions</li> <li>Added <code>modalInteraction(interaction, client, level)</code> method property into command files for handling modalInteraction interactions</li> </ul> <p>You will need to define the customIds property and use those ids name for the respective component in order for interactions to be handled.</p>"},{"location":"release-notes/#202","title":"2.0.2","text":""},{"location":"release-notes/#patch_1","title":"Patch:","text":"<ul> <li>Fixed issue with missing JSDoc for config and env typos</li> <li>Fixed issue where compiled TypeScript code had problems loading module files</li> </ul>"},{"location":"release-notes/#201","title":"2.0.1","text":""},{"location":"release-notes/#patch_2","title":"Patch:","text":"<ul> <li>Fixed issue where JSDoc was not showing in JavaScript code</li> </ul>"},{"location":"release-notes/#200","title":"2.0.0","text":""},{"location":"release-notes/#feature","title":"Feature:","text":"<ul> <li>Upgraded to discord.js v14.9</li> <li>Revamped DiscordFeaturesHandlerOptions setup</li> <li>Deprecated variables:<ul> <li>mainDirectory</li> <li>commandDir</li> <li>eventDir</li> <li>modulesDir</li> <li>BOT_TOKEN</li> <li>Redefined in your .env file as DISCORD_TOKEN and token property in your config file</li> <li>disableBuiltIn</li> <li>loadCommandsLoggerOff</li> <li>loadEventsLoggerOff</li> <li>loadModulesLoggerOff</li> </ul> </li> <li>Replaced <code>slash</code> and <code>slashOptions</code> property with <code>data</code> property to use DiscordJS SlashCommandBuilder to create slash commands</li> <li>Enabled developers to delete slash commands based on Ids</li> <li>Updated JSDoc documentation for easier readability by developers</li> <li>Supports TypeScript natively</li> </ul>"},{"location":"release-notes/#documentation","title":"Documentation:","text":"<ul> <li>Improved JSDoc and index.d.ts file for better readability and easier access in the developer IDE</li> </ul>"},{"location":"release-notes/#112","title":"1.1.2","text":""},{"location":"release-notes/#featurefix","title":"Feature/Fix:","text":"<ul> <li>Updated interaction handler for isButton, isAutoComplete, isContextMenu, isModalSubmit with code that works for the respective interaction instead of a blank if statement. Implemented try/catch for these interactions to prevent bot crashes</li> <li>Command properties for the interactionCreate event of interaction.isContextMenu or interaction.isUserContextMenu (discord.js v13):<ul> <li>contextMenuInteraction(interaction, client, level) is used to execute the interaction</li> </ul> </li> <li>Command properties for the interactionCreate event of interaction.isAutocomplete:<ul> <li>autoCompleteInteraction(interaction, client, level) is used to execute the interaction</li> </ul> </li> <li>Command properties for the interactionCreate event of interaction.isModalSubmit:<ul> <li>modalCustomId, for customId of a button interaction object</li> <li>modalInteraction(interaction, client, level) is used to execute the interaction</li> </ul> </li> <li>Command properties for the interactionCreate event of interaction.isButton:<ul> <li>buttonCustomId, for customId of a button interaction object</li> <li>buttonInteraction(interaction, client, level) is used to execute the interaction</li> </ul> </li> </ul>"},{"location":"release-notes/#111","title":"1.1.1","text":""},{"location":"release-notes/#documentation_1","title":"Documentation:","text":"<ul> <li>Updated README file about the dev branch and folder structure, support, and notes sections</li> <li>Added code examples in the README file to help developers understand the structure better</li> </ul>"},{"location":"release-notes/#fix_2","title":"Fix:","text":"<ul> <li>Reload command can now read the category folders when unloading and loading a command</li> <li>Improved console log messages when loading a slash command</li> </ul>"},{"location":"release-notes/#110","title":"1.1.0","text":""},{"location":"release-notes/#feature_1","title":"Feature:","text":"<ul> <li>Disable the built-in unhandledRejection handler</li> <li>The option parameter is <code>disableUnhandledRejectionHandler</code>, to disable unhandled promise rejection to prevent bot crashes. Default value is false.</li> <li>Turn off console log stating the filenames that are being loaded</li> <li>The DiscordFeaturesHandler option parameter <code>loadCommandsLoggerOff</code> is used to turn off stating the filename of the command file being loaded. Default value is false.</li> <li>The DiscordFeaturesHandler option parameter <code>loadEventsLoggerOff</code> is used to turn off stating the filename of the event file being loaded. Default value is false.</li> <li>The DiscordFeaturesHandler option parameter <code>loadModulesLoggerOff</code> is used to turn off stating the filename of the module file being loaded. Default value is false.</li> <li>Reduced wait time before loading module files from 10 to 5 seconds</li> <li>The DiscordFeaturesHandler option parameter <code>modulesPreloadTime</code> expected value is a number reflecting milliseconds. The default value is 500.</li> <li>Added Array.prototype.random()</li> <li>Allows getting a random element from an array, e.g., ['a','b','c','d','e'].random() returns any element at random</li> </ul>"},{"location":"release-notes/#documentation_2","title":"Documentation:","text":"<ul> <li>More inline documentation using JSDoc</li> <li>Provides parameter descriptions and correct spelling when hovering or typing</li> <li>Updated README files with more demo code and detailed explanations</li> </ul>"},{"location":"release-notes/#103","title":"1.0.3","text":""},{"location":"release-notes/#bug-fix","title":"Bug Fix:","text":"<ul> <li>Fixed reload command, which was missing concatenation between the filename and .js when unloading the command</li> </ul>"},{"location":"release-notes/#102","title":"1.0.2","text":""},{"location":"release-notes/#documentation_3","title":"Documentation:","text":"<ul> <li>Updated README and JSDoc3 documentation</li> <li>Longer README.md file for npmjs website, providing a quick start guide instead of full documentation</li> <li>JSDoc displays details when hovering over property names after installing DiscordFeaturesHandler</li> </ul>"},{"location":"release-notes/#101","title":"1.0.1","text":""},{"location":"release-notes/#patch-fix","title":"Patch Fix:","text":"<ul> <li>DiscordFeaturesHandler can now be correctly imported without typing out import after installation</li> </ul>"},{"location":"release-notes/#bug-fix_1","title":"Bug Fix:","text":"<ul> <li><code>disableProperties</code> was not implemented correctly</li> </ul>"},{"location":"release-notes/#100","title":"1.0.0","text":""},{"location":"release-notes/#feature_2","title":"Feature:","text":"<ul> <li>Compatible with Heroku and other hosting services for Node.js code</li> <li>Ability to turn off console.log for stating what file is loaded on runtime</li> <li><code>loadCommandsLoggerOff</code> - type boolean</li> <li><code>loadEventsLoggerOff</code> - type boolean</li> <li><code>loadModulesLoggerOff</code> - type boolean</li> <li>Deprecated: <code>disableAllDefaults</code>, <code>disableDefaultHelpCmd</code>, <code>disableDefaultReloadCmd</code>, and <code>disableDefaultMessageCreate</code></li> <li>Use <code>disableBuiltIn</code> object instead</li> </ul>"},{"location":"release-notes/#documentation_4","title":"Documentation:","text":"<ul> <li>Complete documentation and definition of \"official\" release</li> </ul>"},{"location":"release-notes/#01311","title":"0.13.11","text":""},{"location":"release-notes/#fix_3","title":"Fix:","text":"<ul> <li>Fixed path to load commands file for Heroku/server-based hosting</li> </ul>"},{"location":"release-notes/#01310","title":"0.13.10","text":""},{"location":"release-notes/#fix_4","title":"Fix:","text":"<ul> <li>Find path of configuration file when using Heroku server</li> </ul>"},{"location":"release-notes/#0139","title":"0.13.9","text":""},{"location":"release-notes/#new-object","title":"New Object:","text":"<ul> <li>Added <code>disableBuiltIn</code> object to DiscordFeaturesHandler options for disabling built-in features</li> <li>Deprecation warnings for `disableAllDefaults</li> <li>Bug Fix: Overriding default properties when new features were declared</li> </ul>"},{"location":"release-notes/#0137","title":"0.13.7","text":""},{"location":"release-notes/#patch-fix_1","title":"Patch Fix:","text":"<ul> <li>Syntax error fix to re-enable ability to disable reload and messageCreate events</li> </ul>"},{"location":"release-notes/#0136","title":"0.13.6","text":""},{"location":"release-notes/#update","title":"Update:","text":"<ul> <li>Updated command, events, modules handler from for loops to map and use of Promises</li> <li>Handles module files load time better with async/await for basic files, such as loading MongoDB data into a channel on run</li> </ul>"},{"location":"release-notes/#0131","title":"0.13.1","text":""},{"location":"release-notes/#change","title":"Change:","text":"<ul> <li>Changed property <code>filesToExcludeInHandlers</code> from an Array to an object <li>Property <code>filesToExcludeInHandlers</code> now contains object properties of <code>commands</code>, <code>events</code>, and <code>modules</code>, all optional Array"},{"location":"release-notes/#0130","title":"0.13.0","text":""},{"location":"release-notes/#removal","title":"Removal:","text":"<ul> <li>Removed requirement of defining folder property names, using default names instead:</li> <li>Default Command Folder name as \"commands\"</li> <li>Default Events Folder name as \"events\"</li> <li>Default Modules Folder name as \"modules\"</li> <li>Updated README.md file</li> </ul>"},{"location":"release-notes/#0120","title":"0.12.0","text":""},{"location":"release-notes/#update_1","title":"Update:","text":"<ul> <li>Updated README.md file and link to documentation for npmjs.com Readme page</li> </ul>"},{"location":"release-notes/#0111","title":"0.11.1","text":""},{"location":"release-notes/#update_2","title":"Update:","text":"<ul> <li>Updated README.md file</li> </ul>"},{"location":"release-notes/#0110","title":"0.11.0","text":""},{"location":"release-notes/#rename","title":"Rename:","text":"<ul> <li>Revisited properties name and clarified naming conventions</li> <li><code>mainDir</code> =&gt; <code>mainDirectory</code></li> </ul>"},{"location":"release-notes/#0100","title":"0.10.0","text":""},{"location":"release-notes/#first-version","title":"First Version:","text":"<ul> <li>Launch of Discord Features Handler</li> </ul>"},{"location":"builtIn/disabling-built-in-features/","title":"Disabling Built-in Features","text":"<p>If you don't want the built-in features you can disable them by configuring with the DiscordFeaturesHandlerOptions object. </p> <p>Here is an example of disabling all the features.</p> <pre><code>DiscordFeaturesHandler(client, {\n    // object for disablinig the built-in command(s) and/or events(s)\n    builtin_files = {\n      commands: {\n        help: false,\n        reload: false,\n      },\n      events: {\n        messageCreate: false,\n        interactionCreate: false,\n      },\n    },\n    //Object to enable console logs of which file is being loaded\n    onLoad_list_files = {\n      commands: false,\n      events: false,\n      modules: false,\n    },\n\n    //Disable discord-features-handler unhandledRejection handler functions\n    disableUnhandledRejectionHandler = false,\n});\n</code></pre>"},{"location":"builtIn/functions/","title":"Built-in Functions","text":"<p>You can access your config properties using the <code>client.config</code>.</p> <pre><code>client.config\n</code></pre> <p>You can access your command files properties and method by using <code>client.commands</code>.</p> <pre><code>client.commands\n</code></pre> <p>For this method, we use to check the person who sent the message. This will return a number, the permission level of the user.</p> <pre><code>client.getPermissionsLevel({\n  author, // user of the person who send the message\n  channel, // channel where the message was sent\n  guild, // guild where the message was sent\n  guildMember // the guildMember, if its a guildMember who sent the message\n});\n</code></pre> <p>For this method, it will load a command when given command file name and folder name. Typically ran during startup of the bot to ensure the command is ready to use on startup.</p> <pre><code>client.loadCommand({\n  file, // name of the command file\n  folder, // folder name where the command is located\n  loadingMsg //if we should display which file been loaded\n});\n</code></pre> <p>For this method, it will unload a command when given command name and folder name that the command is in. Your bot will no longer have access to the specific command unload until bot restarts. <pre><code>client.unLoadCommand(commandName, folderName) \n</code></pre></p>"},{"location":"builtIn/functions/#here-are-some-other-features-provided","title":"Here are some other features provided:","text":"<p>A built-in Capitalization String Function for words in a sentence format.</p> <pre><code>  // &lt;String&gt;.toProperCase() returns a proper-cased string such as:\n  // \"A quick brown fox jumps the lazy dog\".toProperCase()\n  // returns \"A Quick Brown Fox Jumps The Lazy Dog\"\n  String.prototype.toProperCase = function () {\n    return this.replace(/([^\\W_]+[^\\s-]*) */g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  };\n</code></pre> <p>A built-in Array.random() function to return a random element of an Array.</p> <pre><code>  Array.prototype.random = function () {\n    return this[Math.floor(Math.random() * this.length)];\n  };\n</code></pre> <p>Handling unhandledRejection, events that fails because of missing .catch(e =&gt; {...}); to prevent bot from crashing in middle of production. You can disable this if prefer to have your bot to stop if running into an unexpected error.</p> <pre><code>  process.on(\"unhandledRejection\", (e) =&gt; {\n    console.log(e);\n  });\n</code></pre>"},{"location":"builtIn/help-command/","title":"Built-in Help Command","text":"<p>This is the built-in help command, this will generate an embed with Buttons, and the buttons are named based of your category folder, from your command folder.</p> <p>Info</p> <p>Max category this can handle is 5 categories due to MessageActionRow limit, therefore if you make more than 5 categories in your command folder this command will not work!</p> <p>If you want to modify this built-in file you can disable it in DiscordFeaturesHandlerOptions and create the following help command file and will need to include your own data property if you want it to be a slash command.</p> <pre><code>/**\n * Display all commands based off the user's permission level defined in config.js\n */\nconst {\n  ActionRowBuilder,\n  ButtonBuilder,\n  EmbedBuilder,\n  ButtonStyle,\n} = require(\"discord.js\");\n\nconst customIds = [\n  \"dfh_help_1\",\n  \"dfh_help_2\",\n  \"dfh_help_3\",\n  \"dfh_help_4\",\n  \"dfh_help_5\",\n];\n\nmodule.exports = {\n  name: \"help\",\n  description: \"List all of my commands or info about a specific command.\",\n  aliases: [\"commands\"],\n  customIds,\n  maxArgs: 1,\n  usage: \"&lt;command name&gt;\",\n  async executePrefix(message, args, client) {\n    // using the built-in functions and get the permission level of user\n    const level = client.getPermissionsLevel({\n      author: message.author,\n      channel: message.channel,\n      guild: message.guild,\n      guildMember: message.member,\n    });\n    // filter the commands saved in new collection object\n    const commands = await client.commands.filter(\n      (cmd) =&gt; cmd.permissions &lt;= level\n    );\n    const data = getSortedCommandArray(client, commands);\n\n    if (!args.length) {\n      // get embed with data and categorized all the commands displayed\n      const embed = getInitialEmbed(data, client);\n      //get rows of buttons based of cmds categories\n      const row = getButtonRows(data);\n\n      //send initial message and await\n      message.reply({\n        embeds: [embed],\n        components: [row],\n      });\n    } else {\n      //display the command info requested from user's call\n      const name = args[0].toLowerCase();\n      const response = await getSingleCmd(commands, name, client);\n      return message.reply(response).catch((error) =&gt; console.log(error));\n    }\n  },\n  async execute(interaction, client, level) {\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const { options } = interaction;\n    const name = options.getString(\"cmd_name\");\n\n    const commands = await client.commands.filter(\n      (cmd) =&gt; cmd.permissions &lt;= level\n    );\n    const data = getSortedCommandArray(client, commands);\n\n    if (!name) {\n      const embed = getInitialEmbed(data, client);\n      const row = getButtonRows(data);\n\n      await interaction.editReply({\n        embeds: [embed],\n        components: [row],\n      });\n    } else {\n      //display the command info requested from user's call\n      const response = await getSingleCmd(commands, name, client);\n      return await interaction\n        .editReply(response)\n        .catch((error) =&gt; console.log(error));\n    }\n  },\n  async customIdInteraction(interaction, client, level) {\n    const commands = await client.commands.filter(\n      (cmd) =&gt; cmd.permissions &lt;= level\n    );\n    const data = getSortedCommandArray(client, commands);\n    const customId = interaction.customId;\n    try {\n      if (customIds.includes(customId)) {\n        const newEmbed = getUpdateEmbed(data, customId, client);\n\n        await interaction.update({ embeds: [newEmbed] });\n      } else {\n        console.log(\"Invalid category: \" + customId, data);\n        await interaction.reply({ content: \"Invalid category: \" + customId });\n      }\n    } catch (error) {\n      console.error(\"Error handling customIdInteraction:\", error);\n      await interaction\n        .reply({\n          content: \"An error occurred while processing your request.\",\n          ephemeral: true,\n        })\n        .catch(() =&gt; {});\n    }\n  },\n};\n/**\n *\n * @param {Client} client discord client object\n * @param {Array&lt;string&gt;} commands all commands based off user's permission lvl\n * formatted array of all commands categorized based off sub folder names\n * @returns\n */\nconst getSortedCommandArray = (client, commands) =&gt; {\n  const dataArray = [];\n  const prefix = Array.isArray(client.config.prefix)\n    ? client.config.prefix[0]\n    : client.config.prefix;\n  const commandNames = commands.map((cmd) =&gt; cmd.name);\n  const longestName = commandNames.reduce(function (a, b) {\n    return a.length &gt; b.length ? a : b;\n  });\n  const sorted = commands.sort((p, c) =&gt;\n    p.category &gt; c.category\n      ? 1\n      : p.name &gt; c.name &amp;&amp; p.category === c.category\n      ? 1\n      : -1\n  );\n  let category = \"\";\n  let index = -1;\n  sorted.map((command) =&gt; {\n    let temp = {\n      category: \"\",\n      customId:\n        dataArray.length &lt; 5\n          ? customIds[dataArray.length]\n          : `dfh_help_${dataArray.length}`,\n      commands: [],\n    };\n    if (!category || category != command.category) {\n      category = command.category;\n      temp = { ...temp, category };\n      dataArray.push(temp);\n    }\n\n    index = dataArray.findIndex((element) =&gt; element.category === category);\n    temp = dataArray[index];\n\n    temp.commands.push({\n      name: `${prefix}${command.name}`,\n      description: `${command.description}`,\n    });\n    dataArray[index] = temp;\n  });\n\n  return dataArray;\n};\n\n/**\n *\n * @param {Array&lt;string&gt;} data the data to display on the embed\n * @param {Client} client Discord client object\n * @returns EmbedBuilder to display\n */\nconst getInitialEmbed = (data, client) =&gt; {\n  const categories = data.map((cat) =&gt; `**${cat.category}**`).join(`\\n`);\n\n  const defaultEmbed = new EmbedBuilder().setTitle(\"Help Menu\").setAuthor({\n    name: `${client.user.username} Help Menu`,\n    iconURL: `${client.user.avatarURL()}`,\n  }).setDescription(`There are ${data.length} categories!\\n${categories}\nClick the respective buttons to see the commands of the category. `);\n\n  return defaultEmbed;\n};\n\n/**\n *\n * @param {Array&lt;string&gt;} data the data to display on the embed\n * @param {Number} customId index of category to show\n * @param {Client} client Discord client object\n * @returns EmbedBuilder to display\n */\nconst getUpdateEmbed = (data, customId, client) =&gt; {\n  const index = data.findIndex((d) =&gt; d.customId === customId);\n  const cmds = data[index].commands\n    .map((cmd) =&gt; {\n      let cmdName = cmd.name\n        .replace(\n          Array.isArray(client.config.prefix)\n            ? client.config.prefix[0]\n            : client.config.prefix,\n          \"\"\n        )\n        .toProperCase();\n      return `**${cmdName}**\\n${cmd.description}\\n`;\n    })\n    .join(\"\\n\");\n\n  return new EmbedBuilder()\n    .setAuthor({\n      name: `${client.user.username} Help Menu`,\n      iconURL: `${client.user.avatarURL()}`,\n    })\n    .setTitle(`${data[index].category} Category`)\n    .setDescription(cmds)\n    .setFields({\n      name: `To see a more details about a specific command type following and replace \"name\" with the command name:`,\n      value: `/help name or ${\n        Array.isArray(client.config.prefix)\n          ? client.config.prefix[0]\n          : client.config.prefix\n      }help name`,\n    });\n};\n\n/**\n *\n * @param {Array&lt;string&gt;} data of all commands\n * @param {Boolean} disabled the button once timer expires\n * @returns different colors variations for the component\n */\nconst getButtonRows = (data, disabled = false) =&gt; {\n  const colorForCategory = [\n    {\n      name: \"admin\",\n      color: ButtonStyle.Secondary,\n    },\n    {\n      name: \"commands\",\n      color: ButtonStyle.Primary,\n    },\n    {\n      name: \"miscellaneous\",\n      color: ButtonStyle.Success,\n    },\n    {\n      name: \"system\",\n      color: ButtonStyle.Secondary,\n    },\n  ];\n  const defaultColor = ButtonStyle.Primary;\n\n  const btnArray = data.map((res, i) =&gt; {\n    const catName = res.category;\n\n    const index = colorForCategory.findIndex(\n      (colors) =&gt; colors.name === catName.toLowerCase()\n    );\n    const style = index !== -1 ? colorForCategory[index].color : defaultColor;\n\n    return new ButtonBuilder()\n      .setCustomId(res.customId)\n      .setLabel(catName)\n      .setStyle(style)\n      .setDisabled(disabled);\n  });\n\n  let row = new ActionRowBuilder();\n\n  if (btnArray.length &gt; 0) {\n    btnArray.map((btn) =&gt; row.addComponents(btn));\n  }\n\n  return row;\n};\n\n/**\n *\n * @param {Array&lt;string&gt;} commands listed for the users to see\n * @param {string} name of the command to lookup\n * @param {client} client Discord client object\n * @returns information about the command requested to lookup\n */\nconst getSingleCmd = async (commands, name, client) =&gt; {\n  const prefix = Array.isArray(client.config.prefix)\n    ? client.config.prefix[0]\n    : client.config.prefix;\n  const command = await commands.find(\n    (cmd) =&gt;\n      cmd.name === name ||\n      (Array.isArray(cmd.aliases) &amp;&amp; cmd.aliases.includes(name))\n  );\n\n  const slashCommand = await commands.find(\n    (cmd) =&gt; cmd.data &amp;&amp; cmd.data.name === name\n  );\n\n  if (slashCommand) {\n    const fieldObj = [];\n    fieldObj.push({\n      name: `Category:`,\n      value: `${slashCommand.category}`,\n      inline: true,\n    });\n\n    fieldObj.push({\n      name: `Usage:`,\n      value: `/${slashCommand.name}`,\n      inline: true,\n    });\n    if (slashCommand.executePrefix) {\n      fieldObj.push({\n        name: `Using prefix:`,\n        value: `${prefix}${slashCommand.name} ${slashCommand.usage}${\n          slashCommand.aliases\n            ? `,  ${prefix}${slashCommand.aliases.join(`, ${prefix}`)}`\n            : \"\"\n        }`,\n      });\n    }\n    try {\n      const embed = new EmbedBuilder()\n        .setAuthor({\n          name: `${client.user.tag}`,\n          iconURL: `${client.user.avatarURL()}`,\n        })\n        .setTitle(`${slashCommand.data.name.toProperCase()} Command`)\n        .setDescription(slashCommand.data.description)\n        .setTimestamp()\n        .setFields(fieldObj);\n\n      return { embeds: [embed] };\n    } catch (e) {\n      console.log(e);\n    }\n  } else if (command) {\n    const fieldObj = [];\n    const aliases = command.aliases ? command.aliases.join(\", \") : null;\n    if (aliases) {\n      fieldObj.push({\n        name: `Aliases:`,\n        value: `${aliases}`,\n        inline: true,\n      });\n    }\n    fieldObj.push({\n      name: `Category:`,\n      value: `${command.category}`,\n      inline: true,\n    });\n\n    if (command.usage.length !== 0) {\n      fieldObj.push({\n        name: `Usage:`,\n        value: `${prefix}${command.name} ${command.usage}`,\n      });\n    }\n    fieldObj.push({\n      name: `Slash:`,\n      value: `${command.data ? `True` : `False`}`,\n      inline: true,\n    });\n    try {\n      const embed = new EmbedBuilder()\n        .setAuthor({\n          name: `${client.user.tag}`,\n          iconURL: `${client.user.avatarURL()}`,\n        })\n        .setTitle(`${command.name.toProperCase()} Command`)\n        .setDescription(command.description)\n        .setTimestamp()\n        .setFields(fieldObj);\n\n      return { embeds: [embed] };\n    } catch (e) {\n      console.log(e);\n    }\n  } else {\n    return {\n      content: `The command, **${name}**\n    + does not exist!`,\n    };\n  }\n};\n</code></pre>"},{"location":"builtIn/interactionCreate-event/","title":"Built-in interactionCreate Event","text":"<p>This event handles the creation execution of the slash commands, using the built-in slash command executing from the slash properties of a command file and also using the built-in <code>client.commands</code> Collection object. We will also display the slash command Id, incase you decide to delete a slash command.</p> <p>Using v3.1.0 or later and you decided to disable the built-in IntercationCreate</p> <p>Please use <code>execute</code> property instead of <code>interactionReply</code> property for running slash commands and make sure for the prefix version of the command use <code>executePrefix</code> property if you choose to use a prefix version of the command.</p> <pre><code>const { InteractionType, Events } = require(\"discord.js\");\nmodule.exports = {\n  name: Events.InteractionCreate,\n  async execute(interaction, client) {\n    const { commandName, commandId, customId } = interaction;\n    const level = client.getPermissionsLevel({\n      author: interaction.user,\n      channel: interaction.channel,\n      guild: interaction.guild,\n      guildMember: interaction.member,\n    });\n\n    try {\n      if (interaction.type === InteractionType.ApplicationCommand) {\n        const cmd = client.commands.get(commandName);\n\n        if (!cmd) {\n          console.error(\"Unable to find slash command:\" + cmd);\n          return interaction.reply({\n            content: `Command not found: ${commandName}`,\n            ephemeral: true,\n          });\n        }\n        console.log(\n          `[SLASH CMD]`,\n          `[${interaction.user.tag}]`,\n          `${commandName}`\n        );\n        console.log(\"[SLASH CMD]\", \"[ID]\", commandId);\n\n        try {\n          return cmd.execute(interaction, client, level);\n        } catch (e) {\n          console.log(\n            \"ApplicationCommand interaction (slash command) execution failed\",\n            e\n          );\n          return interaction.reply({\n            content: `An error occurred while processing your command: ${commandName}. Error:\n            ${e}`,\n            ephemeral: true,\n          });\n        }\n      }\n\n      const foundCmd = client.commands.find((cmd) =&gt; {\n        if (!cmd.customIds) return false;\n\n        if (Array.isArray(cmd.customIds)) {\n          return cmd.customIds.includes(customId);\n        }\n\n        return false;\n      });\n\n      if (!foundCmd || !foundCmd.name) {\n        console.error(\"Unable to find command with customId: \" + customId);\n\n        return interaction.reply({\n          content: `Command not found for customId: ${customId}`,\n          ephemeral: true,\n        });\n      }\n\n      if (\n        typeof foundCmd.customIdInteraction !== \"function\" ||\n        !foundCmd.customIdInteraction\n      ) {\n        console.error(\n          `Command \"${foundCmd.name}\" has not implemented customIdInteraction.`\n        );\n        return interaction.reply({\n          content: `Command \"${foundCmd.name}\" has not implemented customIdInteraction.`,\n          ephemeral: true,\n        });\n      }\n\n      console.log(\n        `[CUSTOM ID CMD]`,\n        `[${interaction.user.tag}]`,\n        `${foundCmd.name} CustomID: ${customId}`\n      );\n      try {\n        return foundCmd.customIdInteraction(interaction, client, level);\n      } catch (e) {\n        console.error(\n          `Error executing customIdInteraction for command \"${foundCmd.name}\":`,\n          e\n        );\n        return interaction.reply({\n          content: `An error occurred while processing your interaction: ${foundCmd.name} and customId: ${customId}. Error: ${e}`,\n        });\n      }\n    } catch (e) {\n      console.log(\"Interaction execution failed\", e);\n      return interaction.reply({\n        content: \"An error occurred while processing your interaction.\" + e,\n      });\n    }\n  },\n};\n</code></pre>"},{"location":"builtIn/messageCreate-event/","title":"Built-in MessageCreate Event","text":"<p>This event file essentially handles your command, check the permission level set, and arguments set for you. Once it pass the requirements you set it will execute the command.</p> <p>This is the built-in MessageCreate event that you can disable in DiscordFeaturesHandlerOptions and then can use to tailor to your bot if desired.</p> <p>Using v3.1.0 or later and you decided to disable the built-in MessageCreate</p> <p>Please use <code>executePrefix</code> property instead of <code>execute</code> property for running prefix commands to avoid any conflicts in future.</p> <pre><code>const { ChannelType, Events } = require(\"discord.js\");\nmodule.exports = {\n  name: Events.MessageCreate,\n  execute(message, client) {\n    const configPrefix = client.config.prefix;\n    if (message.author.bot) return;\n\n    if (\n      (typeof configPrefix === \"string\" &amp;&amp;\n        !message.content.startsWith(configPrefix)) ||\n      (Array.isArray(configPrefix) &amp;&amp;\n        !configPrefix.some((prefix) =&gt; message.content.startsWith(prefix)))\n    ) {\n      // if no prefix found; you can create your own logic here for handling messages without a prefix\n      return;\n    }\n\n    const prefix = Array.isArray(configPrefix)\n      ? configPrefix.find((prefix) =&gt; message.content.startsWith(prefix))\n      : configPrefix;\n\n    if (!prefix) return;\n\n    const args = message.content.slice(prefix.length).trim().split(/\\s+/);\n    const command = args.shift().toLowerCase();\n    const cmd =\n      client.commands.get(command) ||\n      client.commands.get(client.aliases.get(command));\n    const level = client.getPermissionsLevel({\n      author: message.author,\n      channel: message.channel,\n      guild: message.guild,\n      guildMember: message.member,\n    });\n    if (!cmd) return;\n    console.log(`[CMD]`, `[${message.author.tag}]`, `${message.content}`);\n\n    if (cmd.guildOnly &amp;&amp; message.channel.type === ChannelType.DM) {\n      return message.reply(\"I can't execute that command inside DMs!\");\n    }\n\n    const cmdPermissions = isNaN(cmd.permissions)\n      ? client.levelCache[cmd.permissions]\n      : cmd.permissions;\n\n    if (level &lt; cmdPermissions) {\n      if (\n        cmdPermissions &gt; 7 &amp;&amp;\n        client.config.displayAdminCommandCallsByNonAdmin\n      ) {\n        return console.log(\n          `[CMD DENIED]`,\n          `${message.content}`,\n          `${message.author.tag}`\n        );\n      }\n      return message.channel\n        .send(`You do not have permission to use this command.\n    Your permission level is ${level} (${\n        client.config.permissions.find((l) =&gt; l.level === level).name\n      })\n    This command requires level ${\n      client.config.permissions.find((l) =&gt; l.level === cmd.permissions).name\n    }} (${cmd.permissions})`);\n    }\n\n    //Check if cmd usage does NOT meet the usage criteria then return\n    if (\n      ((!cmd.maxArgs || cmd.maxArgs === -1) &amp;&amp; args.length &lt; cmd.minArgs) ||\n      (cmd.maxArgs &amp;&amp;\n        cmd.maxArgs != -1 &amp;&amp;\n        (args.length &lt; cmd.minArgs || args.length &gt; cmd.maxArgs))\n    ) {\n      return message.channel.send(\n        `Incorrect syntax usage! ${prefix}${command} ${cmd.usage}`\n      );\n    }\n\n    try {\n      return cmd.executePrefix(message, args, client, level);\n    } catch (e) {\n      console.error(e, `Executing CMD: ${cmd.name}`);\n      message.reply(\"There was an error trying to execute that command!\");\n    }\n  },\n};\n</code></pre>"},{"location":"builtIn/reload-command/","title":"Built-in Reload Command","text":"<p>This is the built-in reload command, that will reload your command files for you so you do not need to restart or reboot your bot for the change of your the current running command file to go into effect.</p> <p>Info</p> <p>However if you just add/upload a new file then you will need to restart your bot.</p> <p>If you want to modify this built-in file you can disable it in DiscordFeaturesHandlerOptions and create the following reload command file</p> <pre><code>const fs = require(\"fs\");\nconst path = require(\"path\");\nconst absolute = path.resolve();\nmodule.exports = {\n  name: \"reload\",\n  description: \"Reload a command!\",\n  aliases: [\"\"],\n  guildOnly: false,\n  permissions: 8,\n  minArgs: 1,\n  maxArgs: 1,\n  usage: \"&lt;command name&gt;\",\n  async executePrefix(message, args, client) {\n    const commandName = args[0];\n    let command;\n\n    if (client.commands.has(commandName)) {\n      command = client.commands.get(commandName);\n    } else if (client.aliases.has(commandName)) {\n      command = client.commands.get(client.aliases.get(commandName));\n    }\n\n    if (!command)\n      return message.channel.send(\n        `The command \\`${commandName}\\` doesnt seem to exist, nor is it an alias. Try again!`\n      );\n\n    const fileName = command.name;\n    const commandFolders = fs.readdirSync(absolute + \"/commands\");\n\n    const folderName = commandFolders\n      .map((folder) =&gt; {\n        const filePathJS = path.join(\n          client.dfhSettings.mainDirectory,\n          client.dfhSettings.commandDir,\n          folder,\n          fileName + \".js\"\n        );\n        const filePathTS = path.join(\n          client.dfhSettings.mainDirectory,\n          client.dfhSettings.commandDir,\n          folder,\n          fileName + \".ts\"\n        );\n        if (fs.existsSync(filePathJS) || fs.existsSync(filePathTS)) {\n          return folder;\n        }\n      })\n      .join(\"\");\n    let response = await client.unloadCommand(fileName, folderName);\n    if (response) return message.reply(`Error Unloading: ${response}`);\n\n    response = client.loadCommand({\n      file: fileName,\n      folder: folderName,\n      loadingMsg: true,\n    });\n    if (response) return message.reply(`Error Loading: ${response}`);\n    message.reply(`The command \\`${commandName}\\` has been reloaded`);\n  },\n};\n</code></pre>"},{"location":"getting-started/Bot%20Script%20file/","title":"Bot Script File","text":"<p>Here is a sample of your index file, to get your discord bot up and running. Assuming you have followed the installation guide, folder structure and have setup your <code>.env</code> file correctly.</p> JSTS index.js<pre><code>require(\"dotenv\").config();\n\nconst { Client, GatewayIntentBits, Partials } = require(\"discord.js\");\nconst { DiscordFeaturesHandler } = require(\"discord-features-handler\");\n\nconst client = new Client({\nintents: [\n    GatewayIntentBits.Guilds,\n    GatewayIntentBits.GuildMembers,\n    GatewayIntentBits.GuildMessages,\n    GatewayIntentBits.DirectMessages,\n  ],\n  partials: [Partials.Channel, Partials.Channel],\n});\n\nDiscordFeaturesHandler(client, {\n  config: \"./config.js\", // configuration file\n  directories: {\n    main: __dirname, // local path to your index.js file\n  },\n});\n</code></pre> index.ts<pre><code>import dotenv from \"dotenv\";\ndotenv.config();\n\nimport { Client, GatewayIntentBits, Partials } from \"discord.js\";\nimport { DiscordFeaturesHandler } from \"discord-features-handler\";\n\nconst client = new Client({\nintents: [\n    GatewayIntentBits.Guilds,\n    GatewayIntentBits.GuildMembers,\n    GatewayIntentBits.GuildMessages,\n    GatewayIntentBits.DirectMessages,\n  ],\n  partials: [Partials.Channel, Partials.Channel],\n});\n\nDiscordFeaturesHandler(client, {\n  config: \"./config\", // configuration file\n  directories: {\n    main: __dirname, // local path to your index.js file\n  },\n});\n</code></pre>"},{"location":"getting-started/TypeScript%20Support/","title":"TypeScript Support","text":"<p>discord-features-handler support typescript natively allowing you to code your discord.js bot in typescript.</p>"},{"location":"getting-started/TypeScript%20Support/#setup","title":"Setup","text":"<pre><code>npm install --save-dev typescript tsx ts-node @types/node tsup\n</code></pre> <p>then add <code>tsconfig.json</code> in your project root folder</p> tsconfig.json<pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"CommonJS\",\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./dist\",\n    \"typeRoots\": [\"./src/types\"],\n    \"removeComments\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"strictNullChecks\": true,\n    \"skipLibCheck\": true\n  }\n}\n</code></pre> <p>then update <code>package.json</code> with the following:</p> package.json<pre><code>  \"main\": \"src/index.ts\",\n  \"type\": \"commonjs\",\n  \"scripts\": {\n    \"dev\": \"tsx watch src/index.ts\",\n    \"start\": \"node dist/index.js\",\n    \"build\": \"tsup src/ --minify\",\n    \"prod\": \"pm2 start dist/index.js\"\n  },\n</code></pre>"},{"location":"getting-started/TypeScript%20Support/#starting-the-bot","title":"Starting the bot","text":"<p>First compile the code:  <pre><code>npm run build\n</code></pre> now you can start up the bot using the following: <pre><code>npm run dev\n</code></pre></p>"},{"location":"getting-started/environment-variables/","title":"Environment Variables","text":"<p>Add <code>.env</code> to your .gitignore file </p> <p>Make sure to prevent your credentials and api keys being uploaded to github</p> <p>Create your <code>.env</code> file with the following information:</p> <pre><code>DISCORD_TOKEN=\"YOUR_DISCORD_BOT_TOKEN\"\nOWNER_ID=\"YOUR_DISCORD_USER_ID\"\nCLIENT_ID=\"YOUR_BOT_CLIENT_ID\"\nDEVELOPMENT_GUILD_ID=\"YOUR_SERVER_ID\"\n</code></pre> <p>You can find your bot Client Id: (Discord Developer Portal &gt; \"General Information\" &gt; application id)</p> <p>In hosting server, such as heroku, there is a section to place your variables and do not need the <code>.env</code> unless you are hosting the bot on your local computer</p> <p>To access the DISCORD_TOKEN or other environment variables you can just type <code>process.env.DISCORD_TOKEN</code></p>"},{"location":"getting-started/folder-structure/","title":"Folder Structure","text":"<p>Now we want to make sure the folder layout is formatted in the following format in order for discord-features-handler to load the commands, events and feature files.</p> <p>Info</p> <p>discord-features-handler provides built-in names defined for <code>commands</code>, <code>events</code>, and <code>modules</code> folders. These folders can be renamed to something else tailored to you. You can redefine these names inside the DiscordFeaturesHandlerOptions. Please make sure you also rename the respective folders.</p> JSTS <pre><code>discord-bot/\n\u251c\u2500\u2500 commands/\n\u2502   \u251c\u2500\u2500 miscellaneous/   //this can be any name you want\n\u2502   \u2502   \u2514\u2500\u2500 ping.js\n\u251c\u2500\u2500 events/\n\u2502   \u2514\u2500\u2500 ready.js\n\u251c\u2500\u2500 modules/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre> <pre><code>discord-bot/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 commands/\n\u2502   \u2502   \u251c\u2500\u2500 miscellaneous/   //this can be any name you want\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ping.ts\n\u2502   \u251c\u2500\u2500  events/\n\u2502   \u2502   \u2514\u2500\u2500 ready.ts\n\u2502   \u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 config.ts\n\u2502   \u251c\u2500\u2500 index.ts\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n</code></pre> <p>Danger</p> <p>Do not put any files inside the top-level of the command folder, put them inside the sub-folders.</p> <p>The commands folder is based on the built-in structure where we rely on the sub-folders to be the category names of the commands inside the folder.</p>"},{"location":"getting-started/installation/","title":"Getting started","text":"<p>discord-features-handler is a package that handles loading commands including slash commands, events and features of your discordjs bot. It allows the developer to focus on creating commands and features for the bot. Also supporting TypeScript natively</p>"},{"location":"getting-started/installation/#installation","title":"Installation","text":"<p>To install the discord-features-handler package run the following command in your terminal:</p> <pre><code>npm install discord-features-handler\n</code></pre>"},{"location":"getting-started/installation/#other-required-packages","title":"Other Required Packages","text":"<p>Info</p> <p>Make sure to have the following packages installed</p> discord.js v14.9 or later<pre><code>npm install discord.js\n</code></pre> For your environment variables:<pre><code>npm install dotenv\n</code></pre>"},{"location":"setup/DiscordFeaturesHandlerOptions/","title":"DiscordFeaturesHandlerOptions","text":"<p>The properties to configure DiscordFeaturesHandler how you want it and to get your discord.js bot up and running.</p> <p>Here is a sample usage with the all properties and parameters.</p> <pre><code>DiscordFeaturesHandler(client, {\n  config = \"./config.js\", // if using TS, remove the extension: \"./config\"\n  directories = {\n    main: __dirname \n    commands: \"commands\", \n    events: \"events\",\n    modules: \"modules\",\n  },\n  builtin_files = { \n    disable_all: false,\n    commands: {\n      help: false, \n      reload: false,  \n    },\n    events: {\n      messageCreate: false, \n      interactionCreate: false,\n    },\n  },\n  onLoad_list_files = {\n    commands: false,  \n    events: false,\n    modules: false,\n  },\n  slashCommandIdsToDelete = {\n    global: [],\n    guild: [],\n  }\n  onSlashCommandsLoading = {\n    delete_global_slash_commands: false, \n    delete_guild_slash_commands: false,\n  },\n  disableUnhandledRejectionHandler = false,\n  modulesPreloadTime = 500,\n  filesToExcludeInHandlers = {\n    commands: [\"\"],\n    events: [\"\"],\n    modules: [\"\"],\n  },\n});\n</code></pre>"},{"location":"setup/DiscordFeaturesHandlerOptions/#properties","title":"Properties","text":"<p>The DiscordFeaturesHandlerOptions object contains properties to configure DiscordFeaturesHandler how you want it and to get your discord.js bot up and running.</p> <p> config string    The path and filename to your config file. If empty, it will use a default config file. Please refer to config file to see the setup and customization. </p> <p> directories object   The object containing the folder names and main directory path. The main property is required. </p> Properties Type Required Description main string true          The full path location to the script file         Expected value: __dirname        commands string false          Folder name that contains your command files. Default: \"commands\"        events string false          Folder name that contains your event files. Default: \"events\"        modules string false          Folder name that contains your modules files. Default: \"modules\"        <p> builtin_files object    This object contains properties of true or false values of what built-in commands and events to disable. </p> Properties Type Default Description disable_all boolean false Disables all built-in commands and events commands Object { ... } Object contains the name of all built-in commands, that you may want to disable. Commands: help and reload events Object { ... } Object contains names of all built-in events that you may want to disable. Events: messageCreate, interactionCreate <p> onLoad_list_files object    This object contains properties of true or false values of what built-in commands and events to disable. </p> Properties Type Default Description commands boolean false Enable console log of command files being loaded events boolean false Enable console log of event files being loaded modules Object false Enable console log of module files being loaded <p> slashCommandIdsToDelete <code>object</code>  An object that contains two property that is an array of slash command IDs that should be deleted for global and guild based slash commands. Each string in the array represents the unique identifier of a registered slash command you want to remove from your application. </p> Properties Type Default Description global Array&lt;string&gt; [] Array of strings of global slash commands ids to be deleted guild Array&lt;string&gt; [] Array of strings of guild slash commands ids to be deleted <p> onSlashCommandsLoading object    This object contains properties of true or false values of handling of loading slash commands </p> Properties Type Default Description delete_global_slash_commands boolean false Enable delete global slash commands before loading new ones delete_guild_slash_commands boolean false Enable delete guild slash commands before loading new one <p> disableUnhandledRejectionHandler Boolean    A Boolean to disable the pre-defined unhandledRejection function to handle uncaught promise rejections, where the bot would not crash upon reaching the rejection.  </p> <p>Info</p> <p>Recommend disabling only to use if you are re-creating this handler to print out the error tailored to read. Otherwise your bot may crash more often.</p> <p> modulesPreloadTime Number    The time to wait before loading module files. This is used to establish a waiting time to connect to the Discord API and ensure we can access the guilds the bot has access to and their Discord Channels, users, and guild information to use within the module files that are waiting to be loaded. The time value is in milliseconds, and by default, the wait time is 500 ms or half a second before the module files are loaded. You can update the time if you require a longer wait time for other API-related tasks such as connecting to a database. </p> <p> filesToExcludeInHandlers Object    An object that contains properties of handler names for the array of strings. The strings represent files that should not run when the bot starts up. </p> <p>Properties</p> Property Type Description commands <code>Array&lt;string&gt;</code> The command files that should not run when the handler is invoked events <code>Array&lt;string&gt;</code> The event files that should not run when the handler is invoked modules <code>Array&lt;string&gt;</code> The module files that should not run when the handler is invoked"},{"location":"setup/commands-file/","title":"Setting up Prefix Commands","text":"<p>Follow the folder structure and create sub folders inside your command folder. Name these sub-folders as a category name for your command files.  In order for commands to run when placed inside their respective sub-folders of the command folder, you need to set the properties for each command.</p> <p>Here is a sample command example with the filename of \"ping.js\" and it's the command  properties:</p> <pre><code>module.exports = {\n    name: 'ping',  //name of command when using &lt;prefix&gt;ping\n    description: 'Ping Pong Command!', // description of command\n    /**\n     * Defines what the prefix command does, \n     * \n     * note for v3.1.0 or later:\n     * execute property has backward compatibility to run prefix commands\n     */\n    executePrefix(message, args, client) {\n        return message.channel.send({ content: 'Pong.'});\n    },\n};\n</code></pre> <p> name string   This is the command name </p> <p> description string   This is the description of the command and its functionality </p> <p> aliases Array&lt;String&gt;    This is the different abbreviation (aliases) of the command that you can use to call and execute the command </p> <p> guildOnly boolean = false      This is set the command if it can only be used within a server or can be used within direct message with the bot </p> <p> permissions number = 0     This is the permission level value of who can execute the command. If set to 0, any user can run this command, 5 is the server owner and 10 is only the bot owner can run the command. For more details, please refer to the config file on the permission levels. </p> <p> minArgs number = 0     This is the minimum arguments required to execute the command </p> <p> maxArgs number  This is the maximum arguments required to execute the command </p> <p> customIds Array&lt;String&gt;    An Array of strings containing strings of customIds used in current command file.  </p> <p> usage string    Show by writing an example of how to execute the command using the command argument(s) in the command call  Example: <code>!ping</code> </p> <p>executePrefix(message, args, client, level) Promise&lt;Message&gt;   This is a function that is invoked when the prefix command is called to be executed.</p> Original <code>execute</code> property in v3.1.0 or later <p>If both the <code>interactionReply</code> and <code>data</code> properties are defined for the same command, the <code>execute</code> property will still run prefix commands. This behavior is provided for backward compatibility and will be removed in v4.0.0.</p> <p>However, if the <code>data</code> property is defined and the <code>interactionReply</code> property is not, the <code>execute</code> property will run as a slash command instead. In this case, <code>executePrefix</code> is required for prefix commands. This will be the expected behavior from v4.0.0 and later.</p> Property Type Required Description message Message Class true This is the message object that represents a message on Discord. args Array&lt;string&gt; false This is the arguments array that is required and sent by the user when the command gets executed. client Discord.Client false This is the Discord client object. level Number false This is the user's permission level."},{"location":"setup/config-file/","title":"Built-in config.js file","text":"<p>This file will handle your command permissions level setup and who is the bot owner, your bot admin, and bot support users. Build your own config.js file and define how your permissions level should work.</p> <p>Tip</p> <p>You can access the config variables by using \"client.config\"</p> <p>Here is the default config.js that is used if no config file is found:</p> JSTS config.js<pre><code>const { ChannelType } = require(\"discord.js\");\n\nconst config = {\n  ownerID: process.env.OWNER_ID,\n  admins: process.env.OWNER_ID,\n  support: process.env.OWNER_ID,\n  prefix: \"!\",\n  token: process.env.DISCORD_TOKEN,\n  clientId: process.env.CLIENT_ID,\n  guildId: process.env.DEVELOPMENT_GUILD_ID,\n  toDeleteSlashCommand: \"\",\n  displayAdminCommandCallsByNonAdmin: false,\n  roles: {\n    modRole: {\n      name: \"mod\"\n    },\n    adminRole: {\n      name: \"admin\"\n    },\n  },\\\n  permissions: [\n    {\n      level: 0,\n      name: \"User\",\n      check: () =&gt; true,\n    },\n    {\n      level: 3,\n      name: \"Moderator\",\n      check: ({ guild, guildMember }) =&gt; {\n        const modRole = guild.roles.cache.find(\n          (r) =&gt; r.name.toLowerCase() === config.roles.modRole.name.toLowerCase()\n        );\n        if (modRole &amp;&amp; guildMember.roles.cache.has(modRole.id)) {\n          return true;\n        } else {\n          return false;\n        }\n      },\n    },\n    {\n      level: 4,\n      name: \"Administrator\",\n      check: ({ guild, guildMember }) =&gt; {\n        const adminRole = guild.roles.cache.find(\n          (r) =&gt; r.name.toLowerCase() === config.roles.adminRole.name.toLowerCase()\n        );\n\n        if (adminRole &amp;&amp; guildMember.roles.cache.has(adminRole.id)) {\n          return true;\n        } else {\n          return false;\n        }\n      },\n    },\n    {\n      level: 5,\n      name: \"Server Owner\",\n      check: ({ author, channel, guild }) =&gt; {\n        return channel.type === ChannelType.GuildText\n          ? guild.ownerId === author.id\n            ? true\n            : false\n          : false;\n      },\n    },\n    {\n      level: 8,\n      name: \"Bot Support\",\n      check: ({ author }) =&gt; {\n        if (!config.support) {\n          if (config.ownerID === author.id) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        return config.support.includes(author.id);\n      },\n    },\n    {\n      level: 9,\n      name: \"Bot Admin\",\n      check: ({ author }) =&gt; {\n        if (!config.admins) {\n          if (config.ownerID === author.id) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        return config.admins.includes(author.id);\n      },\n    },\n    {\n      level: 10,\n      name: \"Bot Owner\",\n      check: ({ author }) =&gt; {\n        return config.ownerID === author.id;\n      },\n    },\n  ],\n};\n\nmodule.exports = config;\n</code></pre> config.ts<pre><code>import { CheckPermissions, Config } from \"discord-features-handler\";\nimport { ChannelType } from \"discord.js\";\n\nconst config: Config = {\n  ownerID: process.env.OWNER_ID,\n  admins: process.env.OWNER_ID,\n  support: process.env.OWNER_ID,\n  prefix: \"!\",\n  token: process.env.DISCORD_TOKEN,\n  clientId: process.env.CLIENT_ID,\n  guildId: process.env.DEVELOPMENT_GUILD_ID,\n  toDeleteSlashCommand: \"\",\n  displayAdminCommandCallsByNonAdmin: false,\n  roles: {\n    modRole: {\n      name: \"mod\"\n    },\n    adminRole: {\n      name: \"admin\"\n    },\n  },\n  permissions: [\n    {\n      level: 0,\n      name: \"User\",\n      check: () =&gt; true,\n    },\n    {\n      level: 3,\n      name: \"Moderator\",\n      check: ({ guild, guildMember }: CheckPermissions) =&gt; {\n        const modRole = guild.roles.cache.find(\n          (r) =&gt; r.name.toLowerCase() === config.roles.modRole.name.toLowerCase()\n        );\n\n        if (modRole &amp;&amp; guildMember.roles.cache.has(modRole.id)) {\n            return true;\n        } else {\n          return false;\n        }\n      },\n    },\n    {\n      level: 4,\n      name: \"Administrator\",\n      check: ({ guild, guildMember }: CheckPermissions) =&gt; {\n        const adminRole = guild.roles.cache.find(\n          (r) =&gt; r.name.toLowerCase() === config.roles.adminRole.name.toLowerCase()\n        );\n        if (adminRole &amp;&amp; guildMember.roles.cache.has(adminRole.id)){ \n          return true;\n        } else {\n          return false;\n        }\n      },\n    },\n    {\n      level: 5,\n      name: \"Server Owner\",\n      check: ({ author, channel, guild }: CheckPermissions) =&gt; {\n        return channel.type === ChannelType.GuildText\n          ? guild.ownerId === author.id\n            ? true\n            : false\n          : false;\n      },\n    },\n    {\n      level: 8,\n      name: \"Bot Support\",\n      check: ({ author }: CheckPermissions) =&gt; {\n        if (!config.support) {\n          if (config.ownerID === author.id) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        return config.support.includes(author.id);\n      },\n    },\n    {\n      level: 9,\n      name: \"Bot Admin\",\n      check: ({ author }: CheckPermissions) =&gt; {\n        if (!config.admins) {\n          if (config.ownerID === author.id) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        return config.admins.includes(author.id);\n      },\n    },\n    {\n      level: 10,\n      name: \"Bot Owner\",\n      check: ({ author }: CheckPermissions) =&gt; {\n        return config.ownerID === author.id;\n      },\n    },\n  ],\n};\n\nmodule.exports = config;\n</code></pre>"},{"location":"setup/config-file/#properties","title":"Properties","text":"<p> ownerID string   Your discord user Id, you should define this in your <code>.env</code> file. Expected: process.env.OWNER_ID </p> <p> admins string | Array&lt;string&gt;   The bot admin discord Ids, you should define this in your <code>.env</code> file.  </p> <p> support string | Array&lt;string&gt;   The bot support discord Ids, you should define this in your <code>.env</code> file.  </p> <p> prefix string | Array&lt;string&gt;   Define the call prefix for command calls that are not slash command calls. You can define this as an array or as a string </p> <p> token string    Your Discord Bot Token, this token can be found in Discord Developer Portal. You should define this in your <code>.env</code> file.   Expected: process.env.DISCORD_TOKEN </p> <p> clientId string   Your bot client id, this id can be found in Discord Developer Portal &gt; \"General Information\" &gt; application id, you should define this in your <code>.env</code> file. Expected: process.env.CLIENT_ID </p> <p> toDeleteSlashCommand string | true    If you want to delete a slash command by slash command Id, you can enter the slash command Id, or if you want to delete all the slash commands then enter the boolean: <code>true</code> </p> <p> displayAdminCommandCallsByNonAdmin boolean    If you want to display an error message when a user who permissions level is less than 7 and uses an bot support or higher permission level command. Default is false. </p> <p> roles Object   The role names of your permissions of all guild server this bot is in. </p> Property Type Description modRole Roles        The role name and role id(optional) of your moderator role of all guild server this bot is in; Default Permission level of 3.      adminRole Roles        The role name of your administrator role of all guild server this bot is in; Default Permission level of 4.       <code>k:string</code> Roles        You can define as many properties as needed and use them for any roles when customizing the permissions array.      Roles Type   This type is a object that contains the following property.    Property Type Description id  string The id of the role name string The name of the role. <p> permissions Array&lt;Object&gt;   The Permissions level definitions </p> Property Type Description level number          The level property represents a numeric value.        name string          The name property represents a string value.        check method          The <code>check</code> method is a function that takes a parameter <code>data</code> of type <code>CheckPermissions</code>, which contains information about the author, guild, guildMember, channelType, and channel. It returns a boolean indicating whether the user has the required permission level.        CheckPermissions Type Property Type Description author User            The author property represents the user who initiated the command.          guild Guild            The guild property represents the server where the command was called.          guildMember GuildMember            The guildMember property represents the member who called the command within the guild.          channel TextChannel | DMChannel            The channel property represents the TextChannel or DMChannel where the command was called.          channelType ChannelType            The channel type of the channel where the command was called."},{"location":"setup/events-file/","title":"Setting up Events","text":"<p>A simple way to setup your discord.js events. All you need to do is set the property name as the event name, and then pass in the parameters needed for the events in the execute function, and set up the rest of the events functionality in it.  You can name the event file as anything you want.</p> JSTS ready.js<pre><code>const { Events } from \"discord.js\";\nmodule.exports = {\n    name: Events.ClientReady, // name of the discord.js event\n    once: true, // if this event should run once only\n    async execute(client) { // when the event is invoked we execute this function\n      console.log(`${client.user.tag}`,\"Ready!\");\n    },\n  };\n</code></pre> ready.ts<pre><code>import { Events } from \"discord.js\";\nmodule.exports = {\n    name: Events.ClientReady, // name of the discord.js event\n    once: true, // if this event should run once only\n    async execute(client) { // when the event is invoked we execute this function\n      console.log(`${client.user.tag}`,\"Ready!\");\n    },\n  };\n</code></pre>"},{"location":"setup/events-file/#properties","title":"Properties","text":"<p> name string   This is the name of the Discord client event. You can find the full list of Discord event names in the enum Events documentation </p> <p> once boolean   If this Discord event should run once or whenever it is called. For example, you would need this property if you are using the ready event. </p> <p> async execute(client, ...args)   This is the method used to execute and handle the Discord event trigger. The first argument is always the Discord Client object. </p> <p>Info</p> <p>This is an example of using Events.GuildMemberUpdate execute function.</p> <pre><code>execute(client, oldMember, newMember) { \n    // do something\n},\n</code></pre>"},{"location":"setup/events-file/#_1","title":"Event files","text":""},{"location":"setup/modules-files/","title":"Setting up Modules files","text":"<p>Modules files are files that contains code that run after all the events and commands are loaded in. These files are ran after your bot client is ready to ensure you can access channels and users information. These are optional files you can create. An example would be creating intervals or timeouts or calling an Database after the client is ready. </p> <p>Info</p> <p>The Discord Client is always passed into these functions and is optional to use based off your needs.</p> JSTS <pre><code>module.exports = (client) =&gt; {\n    // do something\n}\n</code></pre> <pre><code>const myFunction = (client) =&gt;{\n    // do something\n}\n\nexport default myFunction;\n</code></pre>"},{"location":"setup/other-interaction/","title":"Setting up other interactions","text":"<p>Interaction such as buttons, select menu, auto complete, modals and context menus can all be setup within your command file</p> <p>When setting up these interactions you will need to define a customIds property in your command file:</p> <pre><code>import {\n  ActionRowBuilder,\n  ActionRowComponent,\n  ButtonBuilder,\n  ButtonStyle,\n  SlashCommandBuilder,\n} from \"discord.js\";\n\nmodule.exports = {\n        name: 'ping', \n        description: 'Ping Pong Command!',\n        aliases: ['p'], \n        guildOnly: true,\n        permissions: 0,  \n        minArgs: 0,   \n        data: new SlashCommandBuilder()\n          .setName(\"ping\")\n          .setDescription(\"Ping Pong Command\"),\n        /**\n         * customIds for your interaction components\n         */\n          customIds: [\"btnComponentId\",\"backBtnId\"],\n          usage: '', \n          executePrefix(message, args, client) { \n            return message.channel.send({ content: 'Pong.'});\n          },\n          async execute(interaction, client, level){\n            await interaction.deferReply({\n              ephemeral: true,\n            });\n\n            let row = new ActionRowBuilder();\n          const btnArray = [{\n            id: this.customIds.buttonComponent,\n            name: \"Button1\",\n            color: ButtonStyle.Primary,\n          },{\n            id: this.customIds.secondButton,\n            name: \"Button1\",\n            color: ButtonStyle.Secondary,\n          }].map((btn) =&gt; {\n            return new ButtonBuilder()\n              .setCustomId(btn.id)\n              .setLabel(btn.name)\n              .setStyle(btn.color)\n              .setDisabled(disabled);\n          });\n\n          let row = new ActionRowBuilder();\n\n          btnArray.map((btn) =&gt; row.addComponents(btn));\n\n            return await interaction.editReply({\n              content: \"pong\",\n              components: [row],\n            });\n\n          }\n          /**\n           * this is the function to used when interacting with customIds\n           */\n          async customIdInteraction(interaction, client, level){\n            /**\n             * if(interaction.customId === this.customIds[0])\n             */\n            if(interaction.customId === this.customIds.buttonComponent){ \n\n              return interaction.update({\n                content: \"updated button component\",\n              })\n            }\n          }\n};\n</code></pre> <p>If you are creating a customId interaction then you will need to add <code>customIdInteraction</code> method</p> <p> customIdInteraction(interaction, client, level) Promise&lt;Interaction&gt; </p> Property Type Required Description interaction CommandInteraction Class true This is the command interaction object that represents a slash command interaction on Discord. client Discord.Client false This is the Discord client object. level Number false This is the user's permission level."},{"location":"setup/slash-commands-file/","title":"Setting up Slash Commands","text":"<p>If you have a prefix command execution, it can be created in the same command file. </p> <p>All properties required for prefix commands are optional for slash commands.</p> <pre><code>data: new SlashCommandBuilder(),\nasync execute(interaction) {},\n</code></pre> <p>Here is a sample slash command created from our prefix command, ping:</p> <pre><code>const { SlashCommandBuilder } = require(\"discord.js\");\n\nconst name = \"ping\";\nconst description = \"Ping Pong Command!\";\n\nmodule.exports = {\n    name,\n    description,\n    data: new SlashCommandBuilder()\n        .setName(name)\n        .setDescription(description),\n    executePrefix(message, args, client) {\n        return message.channel.send('Pong.');\n    },\n    async execute(interaction) {\n        return await interaction.reply({\n            content: 'Pong!'\n        });\n    }\n};\n</code></pre>"},{"location":"setup/slash-commands-file/#properties","title":"Properties","text":"<p> dataSlashCommandBuilder   This is where you define the properties of the slash command using the SlashCommandBuilder Class. You can also follow the official Discord.js guide. </p> <p> permissions number = 0       In slash commands, you can use this permission level to add an extra layer or feature based on the level, but it will not prevent execution since slash commands are manageable at the server/guild level. </p> <p> global boolean = false       Default is always false. This is used to define if you want the slash command to be a global slash command. For guild based slash commands you will need to go to your <code>.env</code> file to set environment variable <code>DEVELOPMENT_GUILD_ID</code>, then you will have guild based slash commands for that specific guild id. </p> <p>execute(interaction, client, level) Promise&lt;Interaction&gt;   This is a function that is invoked when the slash command is called to be executed.</p> Original <code>interactionReply</code> property in v3.1.0 or later <p>If both the <code>interactionReply</code> and <code>data</code> properties are defined for the same command, the <code>execute</code> property will still run prefix commands. This is provided for backward compatibility and will be removed in v4.0.0.</p> <p>However, if the <code>data</code> property is defined and the <code>interactionReply</code> property is not, then it will execute as a slash command as expected in v4.0.0 and later.</p> Property Type Required Description interaction CommandInteraction Class true This is the command interaction object that represents a slash command interaction on Discord. client Discord.Client false This is the Discord client object. level Number false This is the user's permission level. <p>returns <code>Promise&lt;Interaction&gt;</code></p>"}]}